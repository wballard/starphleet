#!/usr/bin/env bash
source `which tools`
set +e
info "checking ${name}"

# Make sure we don't have any settings from previous orders
unset HEALTHCHECK

ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"
STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus.${name}"

run_orders "${HEADQUARTERS_LOCAL}/${order}/orders"

# Deploy all the things
if [ "${UNPUBLISHED}" == "1" ]; then
  echo 'online' > "${STATUS_FILE}"
  starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
  starphleet-reaper "${name}" "${order}" --force
else
  #status logging, here indicating the healthcheck is about to go
  echo 'checking' > "${STATUS_FILE}"
  lxc-ls --fancy "${name}" | tail -1 | awk '{ print $3; }' > "${STATUS_FILE}.ip"

  ######################
  # Healthchecks
  ######################
  # Give the service a chance to light up
  if [ -n "${HEALTHCHECK}" ]; then
    # Allow for orders to configure the delay
    HEALTHCHECK_INIT_DELAY=${HEALTHCHECK_INIT_DELAY:-180}
    # Keep looping on the service until it responds with a success, or
    # eventually punt after some delay and give up
    info "Testing health of container ${name}"
    for ((c=0; c<=HEALTHCHECK_INIT_DELAY; c++)); do
      # If we get a successful healthcheck
      info "Attempt $c of ${HEALTHCHECK_INIT_DELAY}"
      if starphleet-healthcheck "${name}" "${order}" "${HEALTHCHECK}" ; then
        # Logs are redunant ish but help quickly see what happened when
        # reviewing logs on the command line
        info Healthcheck passed for container ${name}
        # Here we start a upstart 'watchdog' for services that have
        # a healthcheck
        start --no-wait starphleet_orders_healthcheck name="${name}" order="${order}"
        info "Started healthchecker for ${order} on container ${name}"
        # Dump out of our check loop
        break
      fi
      if [ "$c" -eq "${HEALTHCHECK_INIT_DELAY}" ]; then
        #at this point the service has failed to properly start
        warn Service failed to publish "${order}" for container ${name}
        echo 'failed' > "${STATUS_FILE}"
        mail_log
        exit 1
      fi
      sleep 1
    done
  fi


  # At this point the container is active so make it the current container
  echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"

  # Update this containers status with 'online'
  echo 'online' > "${STATUS_FILE}"

  # Trigger new publish configs and a hup of nginx
  starphleet-hup-nginx
  # For good measure
  exit 0
fi
