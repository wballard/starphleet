#!/usr/bin/env bash
source `which tools`
set +e
info "checking ${name}"

# Make sure we don't have any settings from previous orders
unset HEALTHCHECK

ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"
STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus.${name}"
LAST_KNOWN_GOOD_CONTAINER="${CURRENT_ORDERS}/${order}/.last_known_good_container"

run_orders "${HEADQUARTERS_LOCAL}/${order}/orders"

# Deploy all the things
if [ "${UNPUBLISHED}" == "1" ]; then
  starphleet-s3-put-container ${name}

  # It is important for the active container to still get set above
  # so that the reaper won't leave around stale containers.  We
  # now check if this is a build_only server and if yes we will
  # stop running the container and exit cleanly
  if is_container_storage_on_s3 && [ -z "${SERVE_CONTAINERS}" ]; then
    info "Build Only Server - Stopping: ${name}"
    echo 'build server' > "${STATUS_FILE}"
    { stop ; exit 0; }
  fi

  # At this point the container is active so make it the current container
  echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"
  echo 'online' > "${STATUS_FILE}"
  starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
  starphleet-reaper "${name}" "${order}" --force

else
  #status logging, here indicating the healthcheck is about to go
  echo 'checking' > "${STATUS_FILE}"
  lxc-info -n "${name}" -i | awk '{print $2}' > "${STATUS_FILE}.ip"
  echo "${PORT}" > "${STATUS_FILE}.port"

  ######################
  # Healthchecks
  ######################
  # Give the service a chance to light up
  if [ -n "${HEALTHCHECK}" ]; then
    # Allow for orders to configure the delay
    HEALTHCHECK_INIT_DELAY=${HEALTHCHECK_INIT_DELAY:-180}
    # Keep looping on the service until it responds with a success, or
    # eventually punt after some delay and give up
    info "Testing health of container ${name}"
    for ((c=0; c<=HEALTHCHECK_INIT_DELAY; c++)); do
      # If we get a successful healthcheck
      info "Attempt $c of ${HEALTHCHECK_INIT_DELAY}"
      if starphleet-healthcheck "${name}" "${order}" "${HEALTHCHECK}" ; then
        # Logs are redunant ish but help quickly see what happened when
        # reviewing logs on the command line
        info Healthcheck passed for container ${name}
        if ! is_container_storage_on_s3 \
          || (is_container_storage_on_s3 && [ -n "${SERVE_CONTAINERS}" ]); then
          # Here we start a upstart 'watchdog' for services that have
          # a healthcheck
          start --no-wait starphleet_orders_healthcheck name="${name}" order="${order}"
          info "Started healthchecker for ${order} on container ${name}"

        fi
        # Dump out of our check loop
        break
      fi
      if [ "$c" -eq "${HEALTHCHECK_INIT_DELAY}" ]; then
        #at this point the service has failed to properly start
        warn Service failed to publish "${order}" for container ${name}
        echo 'failed' > "${STATUS_FILE}"
        rm "${LAST_KNOWN_GOOD_CONTAINER}"
        if is_container_storage_on_s3; then
          if [ -n "${BUILD_CONTAINERS}" ] && [ -z "${SERVE_CONTAINERS}" ]; then
            mail_log
          fi
        else
          mail_log
        fi
        exit 1
      fi
      sleep 1
    done
  fi

  starphleet-s3-put-container ${name}

  # At this point the container is active so make it the current container
  echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"

  # It is important for the active container to still get set above
  # so that the reaper won't leave around stale containers.  We
  # now check if this is a build_only server and if yes we will
  # stop running the container and exit cleanly
  if is_container_storage_on_s3 && [ -z "${SERVE_CONTAINERS}" ]; then
    info "Build Only Server - Stopping: ${name}"
    echo 'build server' > "${STATUS_FILE}"
    { stop ; exit 0; }
  fi

  # Update this containers status with 'online'
  echo 'online' > "${STATUS_FILE}"

  # Announce HUPS in case someone goes crazy
  echo "HUP_REQUESTED: ${order} ${name}" | logger
  # Trigger new publish configs and a hup of nginx
  starphleet-hup-nginx
  # For good measure
  exit 0
fi
