#!/bin/bash
source `which tools`

while [ 1 ]
do
  if [ -f "${STARPHLEET_NGINX_HUP_TURD}" ]; then

    # Keep track of any errors on publish and do not attempt a hup
    # if one happens
    unset ERROR

    # just to avoid getting stuck, we'll remove the hup turd first
    rm "${STARPHLEET_NGINX_HUP_TURD}" # yes we could race, but meh

    ######################
    # Publish
    ######################

    # Remove the current configs and start fresh
    rm "${NGINX_CONF}"/published/* 2> /dev/null
    rm "${NGINX_CONF}"/published_bare/* 2> /dev/null
    rm "${NGINX_CONF}"/proxy_for/* 2> /dev/null
    rm "${NGINX_CONF}"/named_servers/* 2> /dev/null

    # Run all the accessory nginx configuration tools
    starphleet-ldap-servers
    starphleet-public-keys
    starphleet-beta-groups
    starphleet-nginx-acl-rules

    # CURRENT_ORDERS dir is the 'master' of what should be published
    for CONTAINER_FILE in $(find "${CURRENT_ORDERS}" -type f -iname ".container")
    do
      # Extract the container name that should be deployed
      name=$(cat "${CONTAINER_FILE}")

      # Extract the name of the order
      order="${CONTAINER_FILE%/*}"
      order="${order##*/}"

      STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus.${name}"

      # http basic password authentication access
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
        HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
      else
        HTPASSWD='-'
      fi

      # and LDAP access, almost the same kind of thing -- but LDAPy
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.ldap" ]; then
        LDAP="${HEADQUARTERS_LOCAL}/${order}/.ldap"
      else
        LDAP='-'
      fi

      # and JWT access, almost the same kind of thing -- but JTW
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.jwt" ]; then
        JWT="${HEADQUARTERS_LOCAL}/${order}/.jwt"
      else
        JWT='-'
      fi

      # DEFAULT_LDAP is only applied if no other auth conf exists
      # lock down by default if the env var DEFAULT_LDAP is set and non-empty string 
      if [ -n ${DEFAULT_LDAP} ]; then
        DEFAULT_LDAP=${DEFAULT_LDAP}
      else
        DEFAULT_LDAP="-"
      fi

      # public explicitly overrides any other auth configuration
      if [ -f "${HEADQUARTERS_LOCAL}/${order}/.public" ]; then
        PUBLIC="TRUE"
      else
        PUBLIC="-"
      fi

      # Now attempt to write the nginx configs (starphleet-publish)
      if ! starphleet-publish "${name}" "${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" "${JWT}" "${DEFAULT_LDAP}" "${PUBLIC}" ; then
        # Errors on publish only happen if we can't find the IP which should
        # not be possible because the container isn't published until its
        # successfully running
        warn "Publish Failed - Container: ${name} / Order: ${order}"
        echo 'publish failed' > "${STATUS_FILE}"
        # If we have an error then we fall back to the last known good container
        if [ -f "${CURRENT_ORDERS}/${order}/.last_known_good_container" ]; then
          name=$(cat "${CURRENT_ORDERS}/${order}/.last_known_good_container")
          warn "Falling back to container ${name}"
          if ! starphleet-publish "${name}" "${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" "${JWT}" "${DEFAULT_LDAP}" "${PUBLIC}" ; then
            # If the fallback fails too we need to purge the files that are triggering a deploy
            # and as a final measure we attempt an additional soft deploy.  If that succeeds
            # these files get re-created.  If it STILL fails, somethings is broken
            # bad and we don't want to keep trying this container
            warn Fallback failed to container "${name}" - Attempting Soft Deploy
            rm "${CONTAINER_FILE}"
            rm "${CURRENT_ORDERS}/${order}/.last_known_good_container"
            starphleet-retry-deploy "${order}"
            continue;
          fi
        fi
      fi

      ###################################
      # Support for 'publish' command
      ###################################
      # If the above starphleet-publish worked and if we have any 'publish' files
      # we need to also publish the nginx configs for our publish files.  This
      # should be safe at this point since the above completed its health checks.
      for publish_file in $(find "${CURRENT_ORDERS}/${order}/".publish_* 2> /dev/null); do
        # Purge last run
        unset CHECK
        unset PUBLISH_DESTINATION

        # Extract the publish destination off the file name
        PUBLISH_DESTINATION=$(basename "${publish_file}" | sed -e 's|.publish_||')
        # Double check that the publish file isn't stale by checking the original
        # orders for the command
        [ -f "${HEADQUARTERS_LOCAL}/${PUBLISH_DESTINATION}/orders" ] && CHECK=$(cat ${HEADQUARTERS_LOCAL}/${PUBLISH_DESTINATION}/orders | grep publish | grep "${order}")
        if [ -n "${CHECK}" ]; then
          warn "Publishing ${order} to ${PUBLISH_DESTINATION}"
          starphleet-publish "${name}" "${order}" "${HEADQUARTERS_LOCAL}/${order}/orders" "${HTPASSWD}" "${LDAP}" "${JWT}" "${DEFAULT_LDAP}" "${PUBLIC}" "${PUBLISH_DESTINATION}"
        else
          warn "Stale Publish Command: ${publish_file}"
          rm "${publish_file}"
        fi
      done

      # Keep track of the last good container as a fallback
      echo "${name}" > "${CURRENT_ORDERS}/${order}/.last_known_good_container"

      # Expose any ports requested in the orders
      starphleet-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
    done

    # Support NGINX DNS online/offline operations.
    if [ -f "${STARPHLEET_DNS_ONLINE_STATUS_FILE}" ] && [ ! -h "${NGINX_STATUS_CONFIG_SYMLINK}" ]; then
      # Create the symlink
      ln -s ${NGINX_STATUS_ENDPOINT_CONFIG} ${NGINX_STATUS_CONFIG_SYMLINK}
    fi

    ######################
    # Validate Config / HUP
    ######################

    if [ -z "${ERROR}" ] && ${STARPHLEET_ROOT}/nginx/nginx -p "${NGINX_CONF}" -c nginx.conf -t; then
      # the config is good, let's get nginx running
      if [ -f "${STARPHLEET_RESTART_NGINX_HUP_TURD}" ]; then
        restart starphleet_nginx || start starphleet_nginx
        rm "${STARPHLEET_RESTART_NGINX_HUP_TURD}"
      else
        reload starphleet_nginx || start starphleet_nginx
      fi
    else
      #we have a bad configuration, we'll need to do something about that
      warn "nginx configuration fails validity test, will not restart or apply configuration changes"
      ${STARPHLEET_ROOT}/nginx/nginx -p "${NGINX_CONF}" -c nginx.conf -t 2>&1 || true | mail -s "Starphleet NGINX Config Failed Validation" "root@localhost"
    fi
  fi

  sleep "${STARPHLEET_PULSE}"

done
