description "Starphleet monitor all ordered services for autodeployment"

start on started starphleet
stop on stopping starphleet

respawn

script
  while [ 1 ]
  do
    set +e
    source `which tools`
    sleep "${STARPHLEET_PULSE}"

    get_CURRENT_SHA "${HEADQUARTERS_LOCAL}"
    latest_AUTHOR "${HEADQUARTERS_LOCAL}"
    ORDERS_SHA=${CURRENT_SHA}

    #Clean up Removed Orders
    for ORDER_FILE in $(find "${CURRENT_ORDERS}" -type l -iname ".starphleetstatus")
    do
      ORDER_FILE="${ORDER_FILE%/*}"
      ORDER_FILE="${ORDER_FILE##*/}"
      if [[ $(\ls "${HEADQUARTERS_LOCAL}" | grep -ce "${ORDER_FILE}$") -eq 0 ]]; then
        #Clean up published Nginx Configs
        [ -f "${NGINX_CONF}/upstream/$(urlencode \"/${ORDER_FILE}/\").conf" ] && rm "${NGINX_CONF}/upstream/$(urlencode \"/${ORDER_FILE}/\").conf"
        [ -f "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}/\").conf" ] && rm "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}/\").conf"
        [ -f "${NGINX_CONF}/published_bare/$(urlencode \"/${ORDER_FILE}/\").conf" ] && rm "${NGINX_CONF}/published_bare/$(urlencode \"/${ORDER_FILE}/\").conf"

        [ -d "${CURRENT_ORDERS}/${ORDER_FILE}" ] && rm -rf "${CURRENT_ORDERS}/${ORDER_FILE}"
      fi
    done


    #track the publish ports
    unset PUBLISH_PORTS
    declare -a PUBLISH_PORTS

    #auto deploy each ordered service, really need to use grep here
    #find doesn't work out on that / pattern
    for order in $(find "${HEADQUARTERS_LOCAL}" | grep '/orders$')
    do
      trace -----------------------
      info checking ${order}
      #reset variables
      source /etc/starphleet
      ORDER=$(echo "${order}" | sed -e 's[/orders$[[' | sed -e "s[${HEADQUARTERS_LOCAL}/\?[[")
      #make a place for the orders to be managed while running, this is separate
      #from the order files in the headquarters
      CURRENT_ORDER="${CURRENT_ORDERS}/${ORDER}"
      mkdir -p "${CURRENT_ORDER}"
      #use git to determing if the orders have changed since the last publish
      if [ -f "${CURRENT_ORDER}/.orders_sha" ]; then
        DEPLOYED_ORDERS_SHA=$(cat "${CURRENT_ORDER}/.orders_sha")
        get_VERSION_DIFF ${HEADQUARTERS_LOCAL} ${ORDERS_SHA} ${DEPLOYED_ORDERS_SHA} $(dirname "${order}")
        if [ -n "${VERSION_DIFF}" ]; then
          ORDERS_DIFF="Updated orders"
        else
          ORDERS_DIFF="NONE"
        fi
      else
        ORDERS_DIFF="New orders"
      fi
      LOCAL="${HEADQUARTERS_LOCAL}/${ORDER}/git"
      #get the 'last' autodeploy directive in the order file, and file it
      AUTODEPLOY=${TMPDIR-/tmp}/$$
      trap 'rm -rf ${AUTODEPLOY}' EXIT
      #run the order as a whole script with the autodeploy function defined above
      #this lets folks get creative in orders files as needed
      run_orders "${order}"
      REMOTE=$(cat "${AUTODEPLOY}")
      #check if this publish port is a duplicate, halting the install of this
      #order if so, first one wins
      if [ "${PUBLISH_PORT}" != "0" ]; then
        warn "${ORDER}" is requesting a host port "${PUBLISH_PORT}"
        if [ -n "${PUBLISH_PORTS["${PUBLISH_PORT}"]}" ]; then
          error ${ORDER} attempted to duplicate port ${PUBLISH_PORT}
          echo ${ORDER} attempted to duplicate port ${PUBLISH_PORT} | mail -s 'Headquarters Error' "${AUTHOR}"
          #clear this guard to prevent a deploy
          REMOTE=""
        fi
        PUBLISH_PORTS["${PUBLISH_PORT}"]="1"
      fi
      if [ -n "${REMOTE}" ]; then
        #if there is new code in the remote for a service -- or if the orders have
        #changed, it is time to start
        unset DEPLOY_REASON

        if [ dev_mode ]; then
          #only pull the service once (initial), then leave it alone for development.
          start --no-wait starphleet_serve_order name="${ORDER}" order="${ORDER}"
        else
          #resynchronize to repo on change detection
          starphleet-git-synch "${REMOTE}" "${LOCAL}" && DEPLOY_REASON="Updated service"
          [ "${ORDERS_DIFF}" != "NONE" ] && DEPLOY_REASON="${ORDERS_DIFF}"

          if [ -n "${DEPLOY_REASON}" ]; then
            warn "${DEPLOY_REASON}"
            echo ${ORDERS_SHA} > "${CURRENT_ORDER}/.orders_sha"
            [ -d "${CURRENT_ORDER}/git" ] && rm "${CURRENT_ORDER}/git"
            ln -s "${LOCAL}" "${CURRENT_ORDER}/git"
            get_CURRENT_SHA "${LOCAL}"
            SERVICE_SHA=${CURRENT_SHA}
            ENCODED_ORDER=$(urlencode "${ORDER}")
            #sha for both the service and the orders asking for it, changing either
            #of these starts up a new container that will run in parallel with prior
            #versions
            SERVICE_NAME=$(echo "service-${ENCODED_ORDER}-${ORDERS_SHA}-${SERVICE_SHA}")
            #this is done with no-wait since upstart will prevent duplicate starts
            start --no-wait starphleet_serve_order name="${SERVICE_NAME}" order="${ORDER}"
          fi 

        fi
      fi
    done
  done
end script
