description "Starphleet monitor all ordered services for autodeployment"

start on started starphleet
stop on stopping starphleet

respawn

script
  while [ 1 ]
  do
    set +e
    source `which tools`
    sleep "${STARPHLEET_PULSE}"

    get_CURRENT_SHA "${HEADQUARTERS_LOCAL}"
    latest_AUTHOR "${HEADQUARTERS_LOCAL}"
    ORDERS_SHA="${CURRENT_SHA}"

    #Clean up Removed Orders
    for ORDER_FILE in $(find "${CURRENT_ORDERS}" -maxdepth 2 -type f -iname ".starphleetstatus")
    do
      ORDER_FILE="${ORDER_FILE%/*}"
      ORDER_FILE="${ORDER_FILE##*/}"
      if [ ! -f "${HEADQUARTERS_LOCAL}/${ORDER_FILE}/orders" ] && [ ! -f "${HEADQUARTERS_LOCAL}/${ORDER_FILE}/remote" ]; then
        #Clean up published Nginx Configs
        [ -f "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").conf" ] && rm "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").conf"
        [ -f "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").beta" ] && rm "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").beta"
        [ -f "${NGINX_CONF}/published/${ORDER_FILE}.acl" ] && rm "${NGINX_CONF}/published/${ORDER_FILE}.acl"
        [ -f "${NGINX_CONF}/proxy_for/$(urlencode \"/${ORDER_FILE}\").conf" ] && rm "${NGINX_CONF}/proxy_for/$(urlencode \"/${ORDER_FILE}\").conf"
        [ -f "${NGINX_CONF}/named_servers/$(urlencode \"/${ORDER_FILE}\").conf" ] && rm "${NGINX_CONF}/named_servers/$(urlencode \"/${ORDER_FILE}\").conf"
        [ -f "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").redirect" ] && rm "${NGINX_CONF}/published/$(urlencode \"/${ORDER_FILE}\").redirect"
        [ -f "${NGINX_CONF}/published_bare/$(urlencode \"/${ORDER_FILE}\").conf" ] && rm "${NGINX_CONF}/published_bare/$(urlencode \"/${ORDER_FILE}\").conf"

        [ -d "${CURRENT_ORDERS}/${ORDER_FILE}" ] && rm -rf "${CURRENT_ORDERS}/${ORDER_FILE}"
      fi
    done


    #track the publish ports
    unset PUBLISH_PORTS
    declare -a PUBLISH_PORTS

    #auto deploy each ordered service, really need to use grep here
    #find doesn't work out on that / pattern
    for order in $(find "${HEADQUARTERS_LOCAL}" -maxdepth 2 | grep '/orders$')
    do
      trace -----------------------
      info checking ${order}
      #reset variables
      source /etc/starphleet
      ORDER=$(echo "${order}" | sed -e 's[/orders$[[' | sed -e "s[${HEADQUARTERS_LOCAL}/\?[[")
      #make a place for the orders to be managed while running, this is separate
      #from the order files in the headquarters
      CURRENT_ORDER="${CURRENT_ORDERS}/${ORDER}"
      mkdir -p "${CURRENT_ORDER}"
      #use git to determing if the orders have changed since the last publish
      if [ -f "${CURRENT_ORDER}/.orders_sha" ]; then
        DEPLOYED_ORDERS_SHA=$(cat "${CURRENT_ORDER}/.orders_sha")
        get_VERSION_DIFF ${HEADQUARTERS_LOCAL} ${ORDERS_SHA} ${DEPLOYED_ORDERS_SHA} $(dirname "${order}")
        if [ -n "${VERSION_DIFF}" ]; then
          ORDERS_DIFF="Updated orders"
        else
          ORDERS_DIFF="NONE"
        fi
      else
        ORDERS_DIFF="New orders"
      fi
      # k, so.  in this scope we don't actually care about the betas BUT
      # we do want it to be an associative array... if we DO NOT explicitly
      # make it associative it will implicitly be created as indexed, if you
      # try to index an indexed (non associative array) with an index like
      # pants-3322 bash will try to perform the arithmetic operation that
      # statement seems to indicate (since indexed arrays expect numeric indicies)
      # pants - 3322 will result in an invalid index and blow chunks.
      # thus we explicitly declare BETAS
      declare -A BETAS
      #run the order as a whole script with the autodeploy function defined above
      #this lets folks get creative in orders files as needed
      unset SERVICE_GIT_URL
      run_orders "${order}"
      unset DEPLOY_REASON
      [ "${ORDERS_DIFF}" != "NONE" ] && DEPLOY_REASON="${ORDERS_DIFF}"
      #check if this publish port is a duplicate, halting the install of this
      #order if so, first one wins
      if [ "${PUBLISH_PORT}" != "0" ]; then
        warn "${ORDER}" is requesting a host port "${PUBLISH_PORT}"
        if [ -n "${PUBLISH_PORTS["${PUBLISH_PORT}"]}" ]; then
          error ${ORDER} attempted to duplicate port ${PUBLISH_PORT}
          echo ${ORDER} attempted to duplicate port ${PUBLISH_PORT} | mail -s 'Headquarters Error' "${AUTHOR}"
          #clear this guard to prevent a deploy
          SERVICE_GIT_URL=""
        fi
        PUBLISH_PORTS["${PUBLISH_PORT}"]="1"
      fi
      #if there is a service repo, pull and synch it
      if [ -n "${SERVICE_GIT_URL}" ]; then
        LOCAL="${HEADQUARTERS_LOCAL}/${ORDER}/git"
        #if there is new code in the remote for a service -- or if the orders have
        #changed, it is time to start
        if dev_mode ; then
          #only pull the service once (initial), then leave it alone for development,
          #this is accomplished by having a name based on just the order -- no SHAs
          #will change, thus no new services will be launched
          #that -- and notice there is no starphleet-git-synch
          ENCODED_ORDER=$(urlencode "${ORDER}")
          SERVICE_NAME=$(echo "${ENCODED_ORDER}-")
          start --no-wait starphleet_serve_order name="${SERVICE_NAME}" order="${ORDER}"
        else
          #resynchronize to autodeploy repo, this is the primary case
          starphleet-git-synch "${SERVICE_GIT_URL}" "${LOCAL}" && DEPLOY_REASON="Updated service"
        fi
      fi
      #if there is any reason to start a container -- well, go to it
      if [ -n "${DEPLOY_REASON}" ]; then
        warn "${DEPLOY_REASON}"
        echo ${ORDERS_SHA} > "${CURRENT_ORDER}/.orders_sha"
        if [ -d "${LOCAL}" ]; then
          get_CURRENT_SHA "${LOCAL}"
          SERVICE_SHA="${CURRENT_SHA}"
        fi
        ENCODED_ORDER=$(urlencode "${ORDER}")
        #sha for both the service and the orders asking for it, changing either
        #of these starts up a new container that will run in parallel with prior
        #versions
        if dev_mode ; then
          SERVICE_NAME=$(echo "${ENCODED_ORDER}-")
          stop --no-wait starphleet_serve_order name="${SERVICE_NAME}" order="${ORDER}"
        else
          SERVICE_NAME=$(echo "${ENCODED_ORDER}-${ORDERS_SHA}-${SERVICE_SHA}")
        fi
        #this is done with no-wait since upstart will prevent duplicate starts
        start --no-wait starphleet_serve_order name="${SERVICE_NAME}" order="${ORDER}"
      fi
    done
  done
end script
