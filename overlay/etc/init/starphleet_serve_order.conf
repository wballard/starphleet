# vi: set ts=2 et sw=2 sts=2 :
description "Assign crew members to orders, to run a service in up to $CREW_MEMBERS containers."

stop on starphleet_shutdown 
# the other reason it would get shutdown, is when the reaper comes by

#name is to let us have multiple running versions of the same order
instance $name
#also needs
# - $order: the directory where the ordered repository is cloned
# - $starphleet_id: the starphleet install id

respawn

pre-start script
  source `which tools`
  starphleet-crew-setup "${order}" "${name}"
end script

script
  source `which tools`
  info "starting ${name}"
  apply_order_exports "${CURRENT_ORDERS}/${order}/orders"
  for (( crew_num = 1; crew_num <= ${CREW_MEMBERS}; crew_num += 1 ))
  do
    STATUS_FILE="${CURRENT_ORDERS}/${order}/.starphleetstatus_CM${crew_num}"
    get_CONTAINER_NAME "${name}" "${crew_num}"
    start starphleet_serve_order_to_crew name="${CONTAINER_NAME}" service_name="${name}" status_file="${STATUS_FILE}"
  done
  get_CONTAINER_GROUP "${name}"
  while [ "$(lxc-ls | grep ${CONTAINER_GROUP} | wc -l)" -gt "0" ]
  do
    sleep "${STARPHLEET_PULSE}"
  done
  info "stopping ${name}"
  echo 'stopped' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
end script

post-start script
  set +e
  source `which tools`
  info "checking ${name}"
  #the container and service is started, so healthcheck it before we publish it
  #in order to have a real drainstop / transparent upgrade feature
  echo 'checking' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"

  #if there is a specified healthcheck url
  if [ -f "${CURRENT_ORDERS}/${order}/git/healthcheck" ]; then
    #forgive comments in the healthcheck file
    HEALTHCHECK=$(sed '/^\#/d' "${CURRENT_ORDERS}/${order}/git/healthcheck")
  else
    HEALTHCHECK=''
  fi

  #http basic password authentication access
  if [ -f "${HEADQUARTERS_LOCAL}/${order}/.htpasswd" ]; then
    HTPASSWD="${HEADQUARTERS_LOCAL}/${order}/.htpasswd"
  else
    HTPASSWD=""
  fi

  get_CONTAINER_GROUP "${name}"
  apply_order_exports "${CURRENT_ORDERS}/${order}/orders"

  #run once to proxy pass to the upstream
  if [ -z "${HEALTHCHECK}" ] || starphleet-ready "${CONTAINER_GROUP}" "${PORT}" "${HEALTHCHECK}"; then
    #at this point we have a running container, and it answers HTTP, so we
    #are on the air and can expose it via nginx
    #new versions replace old versions in nginx for the HUP update
    starphleet-publish "${CONTAINER_GROUP}" "${PORT}" "${PUBLISH_PORT}" "${order}" "${HTPASSWD}"
    if [ -n "${PUBLISH_PORT}" ]; then
      info "service published to /${order} and :${PUBLISH_PORT}/"
    else
      info "service published to /${order}"
    fi
    
    echo 'online' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    #any prior version of this order should now be reaped after
    #we wait a small time for prior requests to flush out
    sleep ${STARPHLEET_DRAINSTOP_WAIT}
    starphleet-reaper "${name}" "${order}"
    exit 0
  else
    #at this point the service has failed to properly start
    warn service failed to publish "/${order}"
    echo 'failed' > "${CURRENT_ORDERS}/${order}/.starphleetstatus"
    exit 1
  fi
end script
