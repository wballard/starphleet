#!/usr/bin/env starphleet-launcher
### Usage:
###    starphleet-git-synch <remote> [<local>]
### --help
###
### Make sure a git repo, with an option #[branch|tag] is
### pulled and merged into the specified local
###
### This exits 0 if there were changes, 1 if not, easier
### to use in a shell script if this way

REMOTE=$(echo "${remote//$'\r'/}" | awk -F '#' '{print $1;}')
BRANCH=$(echo "${remote//$'\r'/}" | awk -F '#' '{print $2;}')
BRANCH="${BRANCH:-master}"
local="${local:-$(basename ${REMOTE})}"

STARTING_DIRECTORY=$(pwd)
trap 'cd "${STARTING_DIRECTORY}"' EXIT

# Info: exit 0 the case for this script means, that the repo has changed, or was updated

reclone () {
  cd ..
  rm -rf "${local}"
  starphleet-git clone -b ${BRANCH} "${REMOTE}" "${local}" || fatal clone error
}

dev_mode && [ -d "${local}/.git" ] && exit 1


if [ -d "${local}/.git" ]; then
  info synch ${remote} to ${local}
  cd "${local}"
  #make sure we have the correct repository and branch
  ORIGIN_URL=$(git config remote.origin.url)
  #make sure we have the correct repository and branch
  if [ "${ORIGIN_URL}" != "${REMOTE}" ]; then
    # FDT: This should not need to be addressed
    # Info: Local HQ repo, diffrent from remote, so clone remote
    warn repository url differs, reclone needed
    reclone
    exit 0
  fi

  # FDT: This block does not need changing
  # Info: Local HQ repo correct, branch different from requested, reclone HQ with proper branch checked out
  CURRENT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  if [ "${BRANCH}" != "${CURRENT_BRANCH}" ]; then
    warn specified branch changed, checking out ${BRANCH}
    reclone
    exit 0
  fi

  #Stats: starting withi 53337 events
  #* No Repo "not found, initial clone needed from"
    #- clone 614
  #* Have Repo
    #* Different Remote "repository url differs, reclone needed"
      #- clone 1
    #* Same Remote
      #- fetch 52723
      #* Different Branch "specified branch changed, checking out"
        #- clone 3
      #* Out of Date "new code detected, pulling"
        #- fetch 122
        #- reset
      #* Not current "this clone is not current, reclone needed"
        #- clone 0
      #* Divergent "this clone is diverged, reclone needed"
        #- clone 0
  #fatal error 0
  #no update 52598

  function curl_cache {
    # TODO: testing only
    local ROOT="/tmp/curl_cache"
    local DURATION_IN_SECONDS="${1:-60}"
    local URL="${2}"
    mkdir -p "${ROOT}"
    local CACHE="${ROOT}/$(echo -n ${URL} | sha256sum | cut -f1 -d' ')"
    find "${CACHE}" -type f -not -newermt "-${DURATION_IN_SECONDS} seconds" -delete 2>&1 > /dev/null || true
    if [[ ! -f "${CACHE}" ]]; then
      curl -sS "${URL}" 2> /dev/null 1> "${CACHE}"
    fi
    cat "${CACHE}"
  }

  # Extract ORG/USER and REPO from $REMOTE
  read -r GIT_ORG GIT_REPO <<<$(echo $REMOTE | awk -F "[#/:]" '{gsub(/[.]git$/, "", $(NF)); print $(NF-1),$(NF)}')

  # TODO: using api.github.com with devships gives one only 60 requests per second, so disabling this for now
  #exit 1

  # TODO: replace with our service
  # TODO: handle null LATEST_REMOTE_SHA

  # Pull latest sha from api.github.com (placeholder for our git_sha_api)
  API_URL="https://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/branches/${CURRENT_BRANCH}"
  #LATEST_REMOTE_SHA="$(curl -sS "${API_URL}" | (jq -r ".commit.sha" 2> /dev/null || echo -n "null"))"
  LATEST_REMOTE_SHA="$(curl_cache 180 "${API_URL}" | (jq -r ".commit.sha" 2> /dev/null || echo -n "null"))"
  if [[ "${LATEST_REMOTE_SHA}" = "null" ]]; then
    warn "Could not obtain LATEST_REMOTE_SHA"
    exit 1
  fi
  LATEST_LOCAL_SHA="$(git rev-parse HEAD)"
  if [[ "${LATEST_REMOTE_SHA}" != "${LATEST_LOCAL_SHA}" ]]; then
    warn "LATEST_REMOTE_SHA and LATEST_LOCAL_SHA are different ($LATEST_REMOTE_SHA, $LATEST_LOCAL_SHA)"
    starphleet-git fetch --all &> /dev/null || fatal fetch error
  else
    warn "LATEST_REMOTE_SHA and LATEST_LOCAL_SHA are the same"
    exit 1
  fi

  CURRENT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  # Info: This section would only apply to non-reclones
  # Info: Check if the remote repo has changes we don't have locally
  # FDT: Since git_sha_api would have already provided the sha we need, here we just need to clone
  #      the repo with the proper sha (so new clone method is needed)
  HAS_CHANGES=$(git diff HEAD...origin/${CURRENT_BRANCH} --raw)
  if [ "${HAS_CHANGES}x" != "x" ]; then
    warn new code detected, pulling
    starphleet-git fetch || fatal error during fetch of latest code
    starphleet-git reset --hard origin/${CURRENT_BRANCH} || fatal pull error
    exit 0
  fi
  GIT_STATUS=$(git status)
  remote_pattern="Your branch is (.*) of (.*) by ([0-9]*) commit"
  diverge_pattern="Your branch and (.*) have diverged"
  # FDT: Should not be affected
  if [[ ${GIT_STATUS} =~ "${remote_pattern}" ]]; then
    warn this clone is not current, reclone needed
    reclone
    exit 0
  fi
  # FDT: Should not be affected
  if [[ ${GIT_STATUS} =~ "${diverge_pattern}" ]]; then
    warn this clone is diverged, reclone needed
    reclone
    exit 0
  fi
else
  # FDT: Should not be affected
  warn ${local} not found, initial clone needed from "${REMOTE}" to "${local}"
  starphleet-git clone -b ${BRANCH} "${REMOTE}" "${local}" || fatal clone error
  exit 0
fi

#no changes, pop an error code
exit 1
