#!/usr/bin/env starphleet-launcher
### Usage:
###    starphleet-git-synch <remote> [<local>]
### --help
###
### Make sure a git repo, with an option #[branch|tag] is
### pulled and merged into the specified local
###
### This exits 0 if there were changes, 1 if not, easier
### to use in a shell script if this way

REMOTE=$(echo "${remote//$'\r'/}" | awk -F '#' '{print $1;}')
BRANCH=$(echo "${remote//$'\r'/}" | awk -F '#' '{print $2;}')
BRANCH="${BRANCH:-master}"
local="${local:-$(basename ${REMOTE})}"

STARTING_DIRECTORY=$(pwd)
trap 'cd "${STARTING_DIRECTORY}"' EXIT

# Info: exit 0 the case for this script means, that the repo has changed, or was updated

reclone () {
  cd ..
  rm -rf "${local}"
  starphleet-git clone -b ${BRANCH} "${REMOTE}" "${local}" || fatal clone error
}

dev_mode && [ -d "${local}/.git" ] && exit 1


if [ -d "${local}/.git" ]; then
  info synch ${remote} to ${local}
  cd "${local}"
  #make sure we have the correct repository and branch
  ORIGIN_URL=$(git config remote.origin.url)
  #make sure we have the correct repository and branch
  if [ "${ORIGIN_URL}" != "${REMOTE}" ]; then
    # FDT: This should not need to be addressed
    # Info: Local HQ repo, diffrent from remote, so clone remote
    warn repository url differs, reclone needed
    reclone
    exit 0
  fi

  # FDT: This block does not need changing
  # Info: Local HQ repo correct, branch different from requested, reclone HQ with proper branch checked out
  CURRENT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  if [ "${BRANCH}" != "${CURRENT_BRANCH}" ]; then
    warn specified branch changed, checking out ${BRANCH}
    reclone
    exit 0
  fi

  # Extract ORG/USER and REPO from $REMOTE
  read -r GIT_ORG GIT_REPO <<< $(echo $REMOTE | awk -F "[#/:]" '{gsub(/[.]git$/, "", $(NF)); print $(NF-1),$(NF)}')

  if [[ -n "${GLG_DEPLOYCACHE_URL:-}" ]]; then
    # deploycache route
    read -r DEPLOYCACHE_STATUS_CODE DEPLOYCACHE_RESPONSE <<< $(
      curl -sSG -w '\n%{http_code}' \
        --data-urlencode "owner=${GIT_ORG}" \
        --data-urlencode "repo=${GIT_REPO}" \
        --data-urlencode "branch=${BRANCH}" \
        "${GLG_DEPLOYCACHE_URL}" \
        2> /dev/null \
        | awk 'BEGIN{ RS = "" ; FS = "\n" }{printf "%s ", $NF; NF--; print}'
      )

    if [[ "${DEPLOYCACHE_STATUS_CODE}" != "200" ]]; then
      warn "deploycache status code: ${DEPLOYCACHE_STATUS_CODE}"
      exit 1
    else
      LATEST_REMOTE_SHA="$(echo "\"${DEPLOYCACHE_RESPONSE}\"" | (jq -r "." 2> /dev/null || echo -n "null"))"
    fi
    if [[ "${LATEST_REMOTE_SHA}" = "null" ]]; then
      warn "could not obtain LATEST_REMOTE_SHA"
      exit 1
    fi
    LATEST_LOCAL_SHA="$(git rev-parse HEAD)"
    if [[ "${LATEST_REMOTE_SHA}" != "${LATEST_LOCAL_SHA}" ]]; then
      warn "LATEST_REMOTE_SHA and LATEST_LOCAL_SHA are different ($LATEST_REMOTE_SHA, $LATEST_LOCAL_SHA)"
      starphleet-git fetch --all &> /dev/null || fatal fetch error
    else
      exit 1
    fi
  else
    # non-deploycache route
    starphleet-git fetch --all &> /dev/null || fatal fetch error
  fi

  CURRENT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  # Info: This section would only apply to non-reclones
  # Info: Check if the remote repo has changes we don't have locally
  # FDT: Since git_sha_api would have already provided the sha we need, here we just need to clone
  #      the repo with the proper sha (so new clone method is needed)
  HAS_CHANGES=$(git diff HEAD...origin/${CURRENT_BRANCH} --raw)
  if [ "${HAS_CHANGES}x" != "x" ]; then
    warn new code detected, pulling
    starphleet-git fetch || fatal error during fetch of latest code
    starphleet-git reset --hard origin/${CURRENT_BRANCH} || fatal pull error
    exit 0
  fi
  GIT_STATUS=$(git status)
  remote_pattern="Your branch is (.*) of (.*) by ([0-9]*) commit"
  diverge_pattern="Your branch and (.*) have diverged"
  # FDT: Should not be affected
  if [[ ${GIT_STATUS} =~ "${remote_pattern}" ]]; then
    warn this clone is not current, reclone needed
    reclone
    exit 0
  fi
  # FDT: Should not be affected
  if [[ ${GIT_STATUS} =~ "${diverge_pattern}" ]]; then
    warn this clone is diverged, reclone needed
    reclone
    exit 0
  fi
else
  # FDT: Should not be affected
  warn ${local} not found, initial clone needed from "${REMOTE}" to "${local}"
  starphleet-git clone -b ${BRANCH} "${REMOTE}" "${local}" || fatal clone error
  exit 0
fi

#no changes, pop an error code
exit 1
