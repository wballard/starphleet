#!/usr/bin/env starphleet-launcher
### Usage:
###    starphleet-publish <container_name> <order> <orders_file> [<publish_path>]
### --help
###
### Publish HTTP traffic from the container out to the ship
### nginx at a designated url mount point. This lets you aggregate multiple
### web services under one host and avoid CORS and cross domain muck.
###
### Optionally, you can 'deep publish' or alias further into the container.
run_as_root_or_die

# Even though we won't use this variable here we still
# want to declare it in case the orders don't
declare -A BETAS

# declare for redirects
declare -A REDIRECT_TO
run_orders "${orders_file}"

if ! validate_security; then
  error "Not Publishing ${order} - Security Not Setup Correctly"
  exit 1
fi

ORIGINAL_ORDER_NAME="${order}"

if [ -n "${publish_path}" ]; then
  order="${publish_path}"
fi

public_url="/${order}"
if [ "${public_url}" == "/" ]; then
  public_url=""
fi

#mount this service over a path
MOUNT_CONF="${NGINX_CONF}/published/${order}.conf"
MOUNT_CACHED_CONF="${NGINX_CONF}/published/${order}_cached.conf"
#mount this service over a port
BARE_CONF="${NGINX_CONF}/published_bare/${order}.conf"
#redirect your urls to lxc
REDIRECT_CONF="${NGINX_CONF}/published/${order}.redirect"
#mount this service over a path
PROXY_FOR_CONF="${NGINX_CONF}/proxy_for/${order}.conf"
SERVER_NAMES_CONF="${NGINX_CONF}/named_servers/${order}.conf"

IP_ADDRESS=$(cat "${CURRENT_ORDERS}/${ORIGINAL_ORDER_NAME}/.starphleetstatus.${container_name}.ip")
PORT=$(cat "${CURRENT_ORDERS}/${ORIGINAL_ORDER_NAME}/.starphleetstatus.${container_name}.port")

info publishing to ${IP_ADDRESS}

# If we can't get an IP, punt.  THis can happen if a person manually deletes things
# in CURRENT_ORDERS or tries a starphleet-redeploy which indentionally wipes the world
if [ -z "${IP_ADDRESS}" ]; then
  error "Could not find ip address for container ${container_name} cannot publish"
  exit 1
fi

test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
test ! -d "${NGINX_CONF}/published_bare" && mkdir -p "${NGINX_CONF}/published_bare"
mkdir -p "${NGINX_CONF}/proxy_for"
mkdir -p "${NGINX_CONF}/named_servers"
mkdir -p "${NGINX_CONF}/htpasswd"

[ -f "${NGINX_CONF}/published/crt" ] || cp "${NGINX_CONF}/crt" "${NGINX_CONF}/published/crt"
[ -f "${NGINX_CONF}/published/key" ] || cp "${NGINX_CONF}/key" "${NGINX_CONF}/published/key"

#basic publication at an url mount point
cat << EOF > "${MOUNT_CONF}"

location ${public_url}/ {
  gzip on;
  gzip_types *;
  gzip_proxied any;
  gzip_comp_level 6;
  include ${NGINX_CONF}/cors.conf;
  set \$sendto '';
EOF

# This section handles jwt authentication.  It has to be here (before proxy_pass directive)
# because nxinx set var can't occur after proxy_pass directive
if [ "${SECURITY_MODE}" = 'jwt' ] ; then
info jwt enabled
cat << EOF >> "${MOUNT_CONF}"
  set \$jwt_secret ${JWT_SECRET};
  set \$jwt_auth_site ${JWT_AUTH_SITE};
  set \$jwt_cookie_domain ${JWT_COOKIE_DOMAIN};
  set \$public_url ${public_url};
  set \$jwt_login '';
  set \$jwt_expiration_in_seconds ${JWT_EXPIRATION_IN_SECONDS};
  set \$authentic_token "${STARPHLEET_AUTHENTIC_TOKEN}";
  rewrite_by_lua_file /var/starphleet/nginx/lua/jwt.lua;
EOF
fi

cat << EOF >> "${MOUNT_CONF}"
  if (\$http_cookie ~ "beta_${order}=(.*?)(;|$)") {
    set \$sendto \$1;
    rewrite ${public_url}/(.*) \$sendto/\$1 last;
  }
  rewrite ${public_url}/(.*) /\$1 break;
  proxy_pass http://${IP_ADDRESS}:${PORT};
  # cache goes here
  proxy_set_header X-Forwarded-Host \$host;
  proxy_set_header X-Forwarded-Server \$host;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header X-Starphleet-Service-Name: ${order};
  proxy_set_header Host \$http_host;
  # headers go here
  # WebSocket support (nginx 1.4)
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
  more_set_headers 'X-Starphleet-Service: ${public_url}';
  more_set_headers 'X-Starphleet-Container: ${container_name}';
EOF
if [ -n "${NGINX_LOCATION_CONFIGS}" ]; then
  echo "${NGINX_LOCATION_CONFIGS}" >> "${MOUNT_CONF}"
fi
# If the Starphleet EC2 Region is set - also output this header
if [ -n "${STARPHLEET_EC2_REGION}" ]; then
  echo "  more_set_headers 'X-Starphleet-Ship: ${STARPHLEET_EC2_REGION}';" >> "${MOUNT_CONF}"
fi

if [ "${SECURITY_MODE}" = 'htpasswd' ]; then
  info password file enabled
  HTPASSWD_FILE="${NGINX_CONF}/htpasswd/${order}.htpasswd"
  echo "${HTPASSWD}" > "${HTPASSWD_FILE}"
  echo "  auth_basic \"\";" >> "${MOUNT_CONF}"
  echo "  auth_basic_user_file ${HTPASSWD_FILE};" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
  echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
fi
if [ ! -z "${DEVMODE_FORCE_AUTH}" ]; then
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} ${DEVMODE_FORCE_AUTH};" >> "${MOUNT_CONF}"
  echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=${DEVMODE_FORCE_AUTH};" >> "${MOUNT_CONF}"
fi
if [ "${SECURITY_MODE}" = 'ldap' ]; then
  info LDAP enabled
  echo "  auth_ldap \"Forbidden!\";" >> "${MOUNT_CONF}"
  echo "  auth_ldap_servers $LDAP_SERVER;" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
  echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
fi
if [ "${SECURITY_MODE}" != 'public' ] && ! dev_mode ; then
  # don't want to ldap authenticate from other containers on the ship
  # see http://forum.nginx.org/read.php?2,242713,242742#msg-242742
  # note: this needs an auth_basic that alway fails and has the same name as auth_ldap
  echo "  satisfy any;" >> "${MOUNT_CONF}"
  echo "  allow 192.168.0.0/16;" >> "${MOUNT_CONF}"
  echo "  allow 172.16.0.0/12;" >> "${MOUNT_CONF}"
  echo "  allow 10.0.0.0/8;" >> "${MOUNT_CONF}"
fi

#closing off the location
echo '}' >> "${MOUNT_CONF}"

info "published ${container_name}:${PORT} to ${public_url}"


#port publication, this is optional if a port is set - this code gets removed once everything is redirected
if [ "${PUBLISH_PORT}" != "0" ]
then
cat << EOF > "${BARE_CONF}"
server {
  listen ${PUBLISH_PORT};

  location / {
    gzip on;
    gzip_types *;
    gzip_proxied any;
    gzip_comp_level 6;
    include ${NGINX_CONF}/cors.conf;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_pass http://${IP_ADDRESS}:${PORT};
    proxy_redirect \$scheme://\$host:\$server_port/ \$scheme://\$host/;
    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
EOF
  if [ "${SECURITY_MODE}" = 'htpasswd' ]; then
    info password file enabled
    HTPASSWD_FILE="${NGINX_CONF}/htpasswd/${order}.htpasswd"
    echo "${HTPASSWD}" > "${HTPASSWD_FILE}"
    echo "  auth_basic \"\";" >> "${BARE_CONF}"
    echo "  auth_basic_user_file ${HTPASSWD_FILE};" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
    echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${BARE_CONF}"
  fi
  if [ "${SECURITY_MODE}" = 'ldap' ]; then
    info LDAP enabled
    echo "  auth_ldap \"Forbidden!\";" >> "${BARE_CONF}"
    echo "  auth_ldap_servers $LDAP_SERVER;" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
    echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
  fi

  echo -e "  }\n}" >> "${BARE_CONF}"
  info "published ${container_name}:${PORT} :${PUBLISH_PORT}"
else
  rm -f "${BARE_CONF}"
fi

#redirect a DNS entry to the lxc url
if [[ "${REDIRECT}" != '' && "${REDIRECT}" != '-' && "${REDIRECTTO}" != '' ]]; then
  info "redirect set for ${REDIRECT}"
  echo "if (\$http_host = ${REDIRECT}) {" > "${REDIRECT_CONF}"
  echo " rewrite ^ ${REDIRECTTO}\$uri permanent;" >> "${REDIRECT_CONF}"
  echo " break;" >> "${REDIRECT_CONF}"
  echo "}" >> "${REDIRECT_CONF}"
fi

#handle the list of redirections by appending to the redirect conf variable
for redirected in "${!REDIRECT_TO[@]}"
do
  info "redirect_to set for ${redirected}"
  echo "if (\$http_host = ${redirected}) {" >> "${REDIRECT_CONF}"
  echo " rewrite ^ ${REDIRECT_TO[$redirected]}\$uri permanent;" >> "${REDIRECT_CONF}"
  echo " break;" >> "${REDIRECT_CONF}"
  echo "}" >> "${REDIRECT_CONF}"
done

# allowing for the addition of headers within the context of orders files, this
# will get the specified headers into our nginx conf for the service
for header in "${!SERVICE_HEADERS[@]}"
do
  info "adding service specific headers $header: ${SERVICE_HEADERS[$header]}"
  sed --regexp-extended -i '' -e "s[# headers go here[# headers go here\n  proxy_set_header ${header} \"${SERVICE_HEADERS[$header]}\";[" ${MOUNT_CONF}
done


if [ -n "${PROXY_FOR_NAMES}" ]; then
  info "publishing container ${container_name} using proxy_for: ${PROXY_FOR_NAMES}"
  #so, what we do here is wrap our newly created MOUNT_CONF with a server block and save it into PROXY_FOR_CONF
  #on the way we change the location block to be '/' which is match all so our new server block proxies all traffic
  #the newly created server block maps our PROXY_FOR_NAMES into the server_name for the block this all ends us with
  #host header mapped server for these orders to the given hostnames given via 'proxy_for' in the orders
  #(e.g. in the orders find 'proxy_for some.dns.name.com')
  if [  -r "${NGINX_CONF}/proxy_for_template.conf.head" -a -r "${NGINX_CONF}/proxy_for_template.conf.tail" -a -r "${MOUNT_CONF}" ]
  then
    cat "${MOUNT_CONF}" | sed -r -e 's[rewrite .*$[[' -e "s[location ${public_url}[location [" | cat "${NGINX_CONF}/proxy_for_template.conf.head" - "${NGINX_CONF}/proxy_for_template.conf.tail" | sed --regexp-extended -e "s[\{\{\{proxy_for_names\}\}\}[${PROXY_FOR_NAMES//./\.}[" > "${PROXY_FOR_CONF}"
  else
    error 'unable to find proxy_for_template.conf.* files. cannot set up proxying for provided names'
  fi
fi

if [ -n "${SERVER_NAMES}" ]; then
  info "publishing container ${container_name} using server_names: ${SERVER_NAMES} using conf templates named ${SERVER_NAMES_CONF_NAME}"
  [ "${SERVER_NAMES_CONF_NAME}" = "default" ] && SERVER_NAMES_CONF_NAME=named_server_template
  #so, what we do here is wrap our newly created MOUNT_CONF with a server block and save it into PROXY_FOR_CONF
  #on the way we change the location block to be '/' which is match all so our new server block proxies all traffic
  #the newly created server block maps our SERVER_NAMES into the server_name for the block this all ends us with
  #host header mapped server for these orders to the given hostnames given via 'proxy_for' in the orders
  #(e.g. in the orders find 'server_names some.dns.name.com')
  SERVER_NAMES_CONF_HEAD="${NGINX_CONF}/${SERVER_NAMES_CONF_NAME}.conf.head"
  SERVER_NAMES_CONF_TAIL="${NGINX_CONF}/${SERVER_NAMES_CONF_NAME}.conf.tail"
  if [  -r "${SERVER_NAMES_CONF_HEAD}" -a -r "${SERVER_NAMES_CONF_TAIL}" -a -r "${MOUNT_CONF}" ]
  then
    cat "${MOUNT_CONF}" | sed -r -e 's[rewrite .*$[[' -e "s[location ${public_url}[location [" | cat "${SERVER_NAMES_CONF_HEAD}" - "${SERVER_NAMES_CONF_TAIL}" | sed --regexp-extended -e "s[\{\{\{server_names\}\}\}[${SERVER_NAMES//./\.}[" > "${SERVER_NAMES_CONF}"
  else
    error 'unable to find named_server.conf.* files. cannot set up named server for provided names'
  fi
fi

# generate a cached configuration
if [ -n "${ADD_CACHED_LOCATION}" ]; then
	cat "${MOUNT_CONF}" | sed -r -e "s[rewrite .*\$[rewrite ${public_url}_cached/(.*) /\$1 break;[" -e "s[location ${public_url}/[location ${public_url}_cached/ [" | sed -e "s[# cache goes here[add_header X-Cache-Status \$upstream_cache_status;\n  proxy_cache aggressive_zone;\n  proxy_cache_lock on;\n  proxy_cache_methods GET HEAD POST;\n  proxy_ignore_headers Expires Cache-Control;\n  proxy_cache_lock_timeout 1d;\n  proxy_cache_use_stale updating error timeout;\n  proxy_cache_valid 200 2h;\n  proxy_buffering on;\n  proxy_cache_key \$scheme\$proxy_host\$uri\$is_args\$args\$http_method;[" > "${MOUNT_CACHED_CONF}"
fi
