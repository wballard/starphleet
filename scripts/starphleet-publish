#!/usr/bin/env bash
### Usage:
###    starphleet-publish <container_name> <public_url> <orders> <htpasswd> <ldap>
### --help
###
### Publish HTTP traffic from the container out to the ship
### nginx at a designated url mount point. This lets you aggregate multiple
### web services under one host and avoid CORS and cross domain muck.
###
### Optionally, you can 'deep publish' or alias further into the container.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"
set -e

STARPHLEET_HEADQUARTERS=${STARPHLEET_HEADQUARTERS:-/var/starphleet/headquarters}

declare -A BETAS
run_orders "${orders}"

order_name=${public_url}
if [ "${public_url}" == "/" ]; then
  public_url=""
fi
#mount this service over a path
MOUNT_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").conf"
#mount this service over a port
BARE_CONF="${NGINX_CONF}/published_bare/$(urlencode \"${public_url}\").conf"
#rewrites for beta support
BETA_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").beta"
#redirect your urls to lxc
REDIRECT_CONF="${NGINX_CONF}/published/$(urlencode \"${public_url}\").redirect"

IP_ADDRESS=$(lxc-ls --fancy | grep "^${container_name}[[:space:]]" | awk '{ print $3; }')

info publishing to ${IP_ADDRESS}

# we seem to be able to get either an empty string or a - as the ip address
# when things go 'wrong'
if [ -z "${IP_ADDRESS}" -o "${IP_ADDRESS}" == "-" ]; then
  error "could not find ip address for container ${container_name} cannot publish"
  exit 1
fi

test ! -d "${NGINX_CONF}/published" && mkdir -p "${NGINX_CONF}/published"
test ! -d "${NGINX_CONF}/published_bare" && mkdir -p "${NGINX_CONF}/published_bare"

[ -f "${NGINX_CONF}/published/crt" ] || cp "${NGINX_CONF}/crt" "${NGINX_CONF}/published/crt"
[ -f "${NGINX_CONF}/published/key" ] || cp "${NGINX_CONF}/key" "${NGINX_CONF}/published/key"


#redirect to forgive a lack of trailing slash
if [ -n "${public_url}" ]; then
cat << EOF >> "${MOUNT_CONF}"
location = ${public_url} {
  rewrite .* ${public_url}/ last;
}
EOF
fi


#basic publication at an url mount point
cat << EOF > "${MOUNT_CONF}"

location ${public_url}/ {
  gzip on;
  gzip_types *;
  gzip_proxied any;
  gzip_comp_level 6;
  include ${NGINX_CONF}/cors.conf;
  rewrite ${public_url}/(.*) /\$1 break;
  proxy_pass http://${IP_ADDRESS}:${PORT};
  proxy_set_header X-Forwarded-Host \$host;
  proxy_set_header X-Forwarded-Server \$host;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header Host \$http_host;
  # WebSocket support (nginx 1.4)
  proxy_http_version 1.1;
  proxy_set_header Upgrade \$http_upgrade;
  proxy_set_header Connection "upgrade";
  more_set_headers 'X-Starphleet-Service: ${public_url}';
  more_set_headers 'X-Starphleet-Container: ${container_name}';
EOF
if [[ "${htpasswd}" != '' && "${htpasswd}" != '-' ]]; then
  info password file enabled
  echo "  auth_basic \"\";" >> "${MOUNT_CONF}"
  echo "  auth_basic_user_file ${htpasswd};" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
  echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
fi
if [[ "${ldap}" != '' && "${ldap}" != '-' ]]; then
  info LDAP enabled
  echo "  auth_ldap \"Forbidden!\";" >> "${MOUNT_CONF}"
  echo "  auth_ldap_servers $(cat ${ldap});" >> "${MOUNT_CONF}"
  echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${MOUNT_CONF}"
  echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"

  # don't want to ldap authenticate from other containers on the ship
  # see http://forum.nginx.org/read.php?2,242713,242742#msg-242742
  # note: this needs an auth_basic that alway fails and has the same name as auth_ldap
  echo "  satisfy any;" >> "${MOUNT_CONF}"
  echo "  allow 10.0.3.0/8;" >> "${MOUNT_CONF}"
fi

echo "" > "${BETA_CONF}"
for beta in "${!BETAS[@]}"
do
  # Beta groups need a corresponding file with a list of users
  # for the beta.  If that file doesn't exist the following
  # will create variable references that don't exist.  We
  # check to see if the corresponding file is there before we
  # create the config and skip otherwise
  [ ! -f "${STARPHLEET_HEADQUARTERS}/beta_groups/${beta}" ] && continue
  echo "  if (\$starphleet_beta_${beta}) {" >> "${BETA_CONF}"
  echo "    rewrite ^${public_url}/(.*) ${BETAS[$beta]}/\$1 last;" >> "${BETA_CONF}"
  echo "  }" >> "${BETA_CONF}"
  echo "  if (\$starphleet_beta_${beta}_cookie) {" >> "${BETA_CONF}"
  echo "    rewrite ^${public_url}/(.*) ${BETAS[$beta]}/\$1 last;" >> "${BETA_CONF}"
  echo "  }" >> "${BETA_CONF}"
done

#closing off the location
echo '}' >> "${MOUNT_CONF}"

info "published ${container_name}:${PORT} to ${public_url}"

#port publication, this is optional if a port is set - this code gets removed once everything is redirected
if [ "${PUBLISH_PORT}" != "0" ]
then
cat << EOF > "${BARE_CONF}"
server {
  listen ${PUBLISH_PORT};

  location / {
    gzip on;
    gzip_types *;
    gzip_proxied any;
    gzip_comp_level 6;
    include ${NGINX_CONF}/cors.conf;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header Host \$http_host;
    proxy_pass http://${IP_ADDRESS}:${PORT};
    proxy_redirect \$scheme://\$host:\$server_port/ \$scheme://\$host/;
    # WebSocket support (nginx 1.4)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
EOF
  if [[ "${htpasswd}" != '' && "${htpasswd}" != '-' ]]; then
    echo "  auth_basic \"\";" >> "${BARE_CONF}"
    echo "  auth_basic_user_file ${htpasswd};" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
    echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
  fi
  if [[ "${ldap}" != '' && "${ldap}" != '-' ]]; then
    echo "  auth_ldap \"Forbidden!\";" >> "${BARE_CONF}"
    echo "  auth_ldap_servers $(cat ${ldap});" >> "${BARE_CONF}"
    echo "  proxy_set_header ${USER_IDENTITY_HEADER} \$remote_user;" >> "${BARE_CONF}"
    echo "  add_header Set-Cookie ${USER_IDENTITY_COOKIE}=\$remote_user;" >> "${MOUNT_CONF}"
  fi

  echo -e "  }\n}" >> "${BARE_CONF}"
  info "published ${container_name}:${PORT} :${PUBLISH_PORT}"
else
  rm -f "${BARE_CONF}"
fi

#redirect a DNS entry to the lxc url
if [[ "${REDIRECT}" != '' && "${REDIRECT}" != '-' && "${REDIRECTTO}" != '' ]]; then
  info "redirect set for ${REDIRECT}"
  echo "if (\$http_host = ${REDIRECT}) {" > "${REDIRECT_CONF}"
  echo " rewrite ^ ${REDIRECTTO}$request_uri permanent;" >> "${REDIRECT_CONF}"
  echo " break;" >> "${REDIRECT_CONF}"
  echo "}" >> "${REDIRECT_CONF}"
fi

#reload to get the newly generated settings
reload starphleet_nginx || start starphleet_nginx
