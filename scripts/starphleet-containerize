#!/usr/bin/env bash
### Usage:
###    starphleet-containerize <git_url> <container_name>
### --help
###
### Make a new container for a git repository service.
### This uses Heroku buildpacks, and will detect how to create your
### container automatically.
###
### Once this script is done, you will have a running container.
###
### The container will have a layout with the following special directories:
### /var/starphleet - This mounts back to /var/starphleet on the host
###    read only
### /app - Your git repository will be here
### /block - Handy way to block until the container has networking
### /buildpack - Script to run the buildpack sequence on your container
### /start - This is the Heroku style start script
### /web - This is a shortcut for /start web
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

set -e

#places for things to live
CONTAINER_NAME="${container_name}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}/rootfs

#configuration, this is the place to mount directories on the host computer
#into the container
#note: this takes effect after the initial create, which generates the
#inital container configuration, and this is tacked on the end
#so we are starting the container twice
CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = /var/starphleet ${CONTAINER_ROOT}/var/starphleet none bind,rw 0 0
EOF
trap 'rm -rf ${CONTAINER_CONF}' EXIT

#actually make a container here
info Creating ${CONTAINER_NAME}
if lxc-ls | grep "${CONTAINER_NAME}$" > /dev/null; then
  info already built ${CONTAINER_NAME}
else
  #clone on top of the base image, this is just to save disk space
  lxc-clone -o "starphleet-base" -n "${CONTAINER_NAME}" -s
  #mounts and files, always can see starphleet read only
  mkdir ${CONTAINER_ROOT}/var/starphleet
  #and yes, here is the repo to containerize
  REMOTE=$(echo "${git_url}" | awk -F '#' '{print $1;}')
  BRANCH=$(echo "${git_url}" | awk -F '#' '{print $2;}')

  #get the source code, and get on the right branch
  git clone "${REMOTE}" "${CONTAINER_ROOT}/app"
  pushd "${CONTAINER_ROOT}/app"
  chmod -R 0777 .
  if [ -n "${BRANCH}" ]; then
    git checkout "${BRANCH}"
  fi
  popd
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/../config
  #block script, makes sure we are on the air
  cp "${DIR}/starphleet-wait-network" "${CONTAINER_ROOT}/block"
  #build script, uses buildpacks
  cp "${DIR}/starphleet-buildpack-script" "${CONTAINER_ROOT}/buildpack"
  #fire up the container
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-wait-lxc ${CONTAINER_NAME} RUNNING
  info building ${CONTAINER_NAME}
  #once the network is up, make a workable container with the buildpack
  lxc-attach --name ${CONTAINER_NAME} -- bash /block
  lxc-attach --name ${CONTAINER_NAME} -- bash /buildpack
  #now we have a running, built container
  info built ${CONTAINER_NAME}
fi
