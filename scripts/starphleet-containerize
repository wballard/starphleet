#!/usr/bin/env bash
### Usage:
###    starphleet-containerize <git_url> <container_name> [<orders_dir>]
### --help
###
### Make a new container for a git repository service.
### This uses Heroku buildpacks, and will detect how to create your
### container automatically.
###
### Once this script is done, you will have a running container.
###
### The container will have a layout with the following special directories:
### ${STARPHLEET_ROOT} - This mounts back to ${STARPHLEET_ROOT} on the host
### ${HOME}/app - Your git repository will be here
### ${HOME}/start - This is the Heroku style start script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"

set -e

#places for things to live
STARPHLEET_BASE="${STARPHLEET_BASE:-starphleet-base}"

ORDERS="${orders_dir}/orders"

#build script for our service container, the most important thing is that
#it gets the source from git
#the second most important thing is to know that this runs on the container
CONTAINER_BUILD_SCRIPT=${STARPHLEET_TMP}/${container_name}.build

#This *really needs* to be unescaped, need to get HOME from the point of view
#of the container
cat << 'EOF' > ${CONTAINER_BUILD_SCRIPT}
set -e
source /usr/bin/tools
trace app will be in ${HOME}/app
export APP_IN=${HOME}/app
EOF

#This *really needs* to be unescaped, notice the \$@ passed along
#to git SSH and ... there are no variables to escape :)
cat << 'EOF' >> ${CONTAINER_BUILD_SCRIPT}
trace Preparing SSH
#buildpacks may pull git and need ssh identity
sudo starphleet-git-config ${STARPHLEET_APP_USER} > /tmp/gitsshconfig
export GIT_SSH=/tmp/gitssh
echo "ssh -F /tmp/gitsshconfig \$@" > /tmp/gitssh
chmod +x /tmp/gitssh
EOF

#now -- this is escaped, lots of variables included from this script
cat << EOF >> ${CONTAINER_BUILD_SCRIPT}

trace Fetching service to \${APP_IN}

if [ "${git_url}" != "-" ]; then
  if dev_mode; then
    trace Local Dev mode
    # Some developers may wish to unbind the GIT directory to the actual app
    # deployment directory so that packages do not mangle their working git
    # directory.  Supporting both behaviors.
    if [ -d "${HEADQUARTERS_LOCAL}/${order}/git" ]; then
      if [ -n "${DEVMODE_UNBIND_GIT_DIR}" ]; then
        sudo rsync -rlKt "${HEADQUARTERS_LOCAL}/${order}/git/" \${APP_IN}/ || true
        sudo chown -R ubuntu:ubuntu \${APP_IN} || true
      else
        sudo chown -R ubuntu:ubuntu "${HEADQUARTERS_LOCAL}/${order}/git"
        ln -s "${HEADQUARTERS_LOCAL}/${order}/git" \${APP_IN} || true
      fi
    fi
  else
    starphleet-git-synch "${git_url}" \${APP_IN}
  fi
fi

trace Running orders
export ORDERS_NAME="$(basename $(dirname $ORDERS))"
run_orders ${ORDERS}

trace Prepping container
[ -x ${orders_dir}/on_containerize ] && sudo ${orders_dir}/on_containerize


trace Fetching buildpacks
#set up a place onboard for possible custom buildpacks
mkdir -p "\${HOME}/build"
rsync -az "${BUILDPACKS}/" "\${HOME}/build/buildpacks"
if [ "${git_url}" == "-" ]; then
  sudo starphleet-git-synch "https://github.com/wballard/null-buildpack.git"  "\${HOME}/build/buildpacks/ZZZ-NULL"
fi

EOF

#now hand off to buildstep builder
cat << EOF >> ${CONTAINER_BUILD_SCRIPT}
trace Running buildpack
if [ -n "\${BUILDPACK_CACHE_DIR}" ]
then
  if ! dev_mode ; then
    trace Buildpack caching is enabled
    sudo mkdir -p "\${BUILDPACK_CACHE_DIR}"
    sudo chown -R ${STARPHLEET_APP_USER}:${STARPHLEET_APP_USER} "\${BUILDPACK_CACHE_DIR}"
  fi
fi

trace Calling Builder
builder ${ORDERS}
cronner ${orders_dir} ${ORDERS} 

trace Post-prepping container
[ -x ${orders_dir}/after_containerize ] && sudo ${orders_dir}/after_containerize

# Keep track of different files from out build process
dev_mode && sudo rsync -ruvn --delete "${HEADQUARTERS_LOCAL}/${order}/git/" \${APP_IN}/ | grep -iE "^deleting " | sed -e 's|^deleting ||' > ${DEVMODE_BUILD_CACHE}

trace Container ready

EOF

info building ${container_name}
#and now, actually make the container for your application
starphleet-containermake --run "${container_name}" "${CONTAINER_BUILD_SCRIPT}" "${STARPHLEET_BASE}"
