#!/usr/bin/env bash
### Usage:
###    starphleet-containermake [--run] <container_name> <build_script> [<base_container_name>]
### --help
###
### Make or replace a container based on a build script.
### This has one tiny bit of magic in that starphleet-base will be a
### root level container, and all other containers will snapshot from
### starphleet-base.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"
trace "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")") : $*"

set -e
test -f "${build_script}"

[ -d /var/lib/lxc/data ] || mkdir -p /var/lib/lxc/data
chmod 777 /var/lib/lxc/data

CONTAINER_NAME="${container_name}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}
LOCK_FILE=${CONTAINER_NAME}
# A race condition occurs when locking based on containername
# where multiple containers for the same order will trample
# on each other continuiously.  We are using the 'order' to
# lock so we only build once per order
if dev_mode ;then
  [ -z ${order} ] && LOCK_FILE=${CONTAINER_NAME} || LOCK_FILE=${order}
fi

#configuration, this is the place to mount directories on the host computer
#into the container
#note: this takes effect after the initial create, which generates the
#inital container configuration, and this is tacked on the end
#so we are starting the container twice
CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
#mounting host system dirs into the lxc container

#starphleet-base is a create, all orders are a clones to delta0
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = ${STARPHLEET_ROOT} ${CONTAINER_ROOT}/rootfs/${STARPHLEET_ROOT:-var/starphleet} none bind,r 0 0
lxc.mount.entry = ${ADMIRAL_HOME} ${CONTAINER_ROOT}/rootfs/${ADMIRAL_HOME} none defaults,bind,create=dir 0 0
EOF

trap 'rm -rf ${CONTAINER_CONF}' EXIT

(
#flocked, parallel container build is a race condition on start
if dev_mode ; then
  # In dev mode you should only need to build once even on many saves
  # .. so dying gracefully is more ideal
  flock -n 200
  if [ $? -ne 0 ]; then
    echo "unable to aquire lock to run ${script}"
    # no error code so cron won't try to email
    exit 0
  fi
else
  flock 200
fi

if lxc-ls | grep "^${container_name}$"; then
  info container exists
  exit 0
else
  info making a new container ${CONTAINER_NAME}
  # load the ship name as configured in /etc/starphleet-name or, just use the sucky hostname
  SHIP_NAME=$([ -r /etc/starphleet-name ] && $(echo cat /etc/starphleet-name) || echo $(hostname))

  starphleet-lxc-destroy ${CONTAINER_NAME}
  if [ -z "${base_container_name}" ]; then
    lxc-create --name "${container_name}" -t ubuntu
    CONTAINER_OVERLAY=${CONTAINER_ROOT}/rootfs
  else
    lxc-clone --snapshot -B overlayfs -o "${base_container_name}" -n "${container_name}"
    CONTAINER_OVERLAY=${CONTAINER_ROOT}/delta0
  fi

  if dev_mode ; then
    info Local Dev mode appending mount to ${CONTAINER_CONF}
    # Edit:  This needs to take into account that these directories are properly
    #        mounted as an HGFS file system or we need to punt completely
    #
    #        This helps survive a reboot where HGFS has not come up yet but
    #        starphleet has started
    # TODO: But what about parallels or virtualbox?
    TEST=$(mount | grep /hosthome | grep vmhgfs)
    [ -z "${TEST}" ] && exit 1
    # Proceed with original authors code
    STARPHLEET_DEV_DIR=/hosthome/starphleet_dev
    # Make the dirs
    mkdir -p "${STARPHLEET_DEV_DIR}"
    mkdir -p "${STARPHLEET_DEV_DIR}/data"
    mkdir -p "${CONTAINER_OVERLAY}/var/git"
    # Fix the perms on the dirs
    chmod 777 "${STARPHLEET_DEV_DIR}"
    chmod 777 "${STARPHLEET_DEV_DIR}"
    chmod 777 "${CONTAINER_OVERLAY}/var/git"
    # add one additional mount point to the lxc container config.  Wil expose the container git dir to the host
    echo "lxc.mount.entry = ${STARPHLEET_DEV_DIR}/data ${CONTAINER_ROOT}/rootfs/var/data none bind,rw 0 0" >> ${CONTAINER_CONF}
    echo "lxc.mount.entry = ${STARPHLEET_DEV_DIR} ${CONTAINER_ROOT}/rootfs/var/git none bind,rw 0 0" >> ${CONTAINER_CONF}
  else
    echo "lxc.mount.entry = ${STARPHLEET_SHARED_DATA} ${CONTAINER_ROOT}/rootfs/var/data none rbind,rw 0 0" >> ${CONTAINER_CONF}
  fi


  #make a directory where we can mount back to the ship and a config file to mount
  test -d "${CONTAINER_OVERLAY}${STARPHLEET_ROOT}" || mkdir -p "${CONTAINER_OVERLAY}${STARPHLEET_ROOT}"
  test -d "${CONTAINER_OVERLAY}/var/data" || mkdir -p "${CONTAINER_OVERLAY}/var/data"
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/config
  #copy on the starphleet commands
  mkdir -p "${CONTAINER_OVERLAY}/usr/bin"
  [ -f "/hosthome/.starphleet" ] && cp /hosthome/.starphleet "${CONTAINER_OVERLAY}/.starphleet"
  cp /etc/starphleet "${CONTAINER_OVERLAY}/etc/"
  cp -r /etc/starphleet.d "${CONTAINER_OVERLAY}/etc/"
  cp /usr/bin/starphleet* "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/docopt* "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/tools "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/builder "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/cronner "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/runner "${CONTAINER_OVERLAY}/usr/bin/"
  cp -R ${STARPHLEET_ROOT}/containers/overlay/* ${CONTAINER_OVERLAY}/
  #this is the build script for the container itself
  cp "${build_script}" "${CONTAINER_OVERLAY}/build_script"
  chmod +x "${CONTAINER_OVERLAY}/build_script"

  #start up the container, waiting for the network, and then run the container build script
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
  lxc-attach --name ${CONTAINER_NAME} -- bash starphleet-wait-network
  #host file updates
  bridge_ip
  lxc-attach --name ${CONTAINER_NAME} -- bash -c "echo -e '\n${BRIDGE_IP}  localship' >> /etc/hosts"
  lxc-attach --name ${CONTAINER_NAME} -- bash -c "printf '\nexport SHIP_NAME=%s\n' ${SHIP_NAME} >> /usr/bin/tools"
  lxc-attach --name ${CONTAINER_NAME} -- bash -c "echo -e '\n127.0.0.1  $(< /etc/hostname)' >> /etc/hosts"
  lxc-attach --name ${CONTAINER_NAME} -- bash -c "echo -e '\n127.0.0.1  ${CONTAINER_NAME}' >> /etc/hosts"

  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'chmod 777 /var/log/'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'useradd -s /bin/bash ${ADMIRAL} || true'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'adduser ${ADMIRAL} sudo'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'chown -R ${ADMIRAL}:${ADMIRAL} ${ADMIRAL_HOME}/.ssh'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'echo -e "\n${ADMIRAL} ALL=NOPASSWD:ALL" >> /etc/sudoers'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'echo -e "\n${STARPHLEET_APP_USER} ALL=NOPASSWD:ALL" >> /etc/sudoers'
  lxc-attach --name ${CONTAINER_NAME} -- sudo -H -u ${STARPHLEET_APP_USER} bash -c "source /usr/bin/tools; /build_script"

  if [ "${run}" == "true" ]; then
    info leaving ${CONTAINER_NAME} running
  else
    lxc-stop --name ${CONTAINER_NAME}
    starphleet-lxc-wait ${CONTAINER_NAME} STOPPED
  fi
  info made container ${CONTAINER_NAME}
fi # End of container name exists
# Remove lock file to guarantee release
rm "/var/lock/${LOCK_FILE}"
) 200>/var/lock/${LOCK_FILE}
