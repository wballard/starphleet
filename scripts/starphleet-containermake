#!/usr/bin/env bash
### Usage:
###    starphleet-containermake [--run] <container_name> <build_script> [<base_container_name>]
### --help
###
### Make or replace a container based on a build script.
### This has one tiny bit of magic in that starphleet-base will be a
### root level container, and all other containers will snapshot from
### starphleet-base.
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${DIR}/tools
help=$(grep "^### " "$0" | cut -c 5-)
eval "$(${DIR}/docopts -h "$help" -V "$version" : "$@")"

set -e
test -f "${build_script}"

[ -d /var/lib/lxc/data ] || mkdir -p /var/lib/lxc/data
chmod 777 /var/lib/lxc/data

CONTAINER_NAME="${container_name}"
CONTAINER_ROOT=/var/lib/lxc/${CONTAINER_NAME}
CONTAINER_OVERLAY=${CONTAINER_ROOT}/delta0
#configuration, this is the place to mount directories on the host computer
#into the container
#note: this takes effect after the initial create, which generates the
#inital container configuration, and this is tacked on the end
#so we are starting the container twice
CONTAINER_CONF=${TMPDIR-/tmp}/${CONTAINER_NAME}.conf
cat << EOF > ${CONTAINER_CONF}
lxc.mount.entry = /var/starphleet ${CONTAINER_ROOT}/rootfs/var/starphleet none bind,rw 0 0
lxc.mount.entry = /var/lib/lxc/data ${CONTAINER_ROOT}/rootfs/var/data none bind,rw 0 0
EOF
trap 'rm -rf ${CONTAINER_CONF}' EXIT

(
#flocked, parallel container build is a race condition on start
flock 200
if [ -f "${CONTAINER_OVERLAY}/build_script" ] && diff "${CONTAINER_OVERLAY}/build_script" "${build_script}"; then
  info container is up to date
  exit 0
else
  info making a new container ${CONTAINER_NAME}
  starphleet-lxc-destroy ${CONTAINER_NAME}
  #special case to make the base, so we can always snapshot
  if [ -z "${base_container_name}" ]; then
    if lxc-ls | grep "ubuntu" > /dev/null; then
      :
    else
      lxc-create --name "ubuntu" -t ubuntu
    fi
    base_container_name="ubuntu"
  fi
  lxc-clone --snapshot -B overlayfs -o "${base_container_name}" -n "${CONTAINER_NAME}"
  #make a directory where we can mount back to the ship and a config file to mount
  test -d "${CONTAINER_OVERLAY}/var/starphleet" || mkdir -p "${CONTAINER_OVERLAY}/var/starphleet"
  test -d "${CONTAINER_OVERLAY}/var/data" || mkdir -p "${CONTAINER_OVERLAY}/var/data"
  cat ${CONTAINER_CONF} >> ${CONTAINER_ROOT}/config
  #copy on the starphleet commands
  mkdir -p "${CONTAINER_OVERLAY}/usr/bin"
  [[ -d /hosthome && -f /hosthome/.starphleet ]] && cp /hosthome/.starphleet "${CONTAINER_OVERLAY}/.starphleet"
  cp /usr/bin/starphleet* "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/docopt* "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/tools "${CONTAINER_OVERLAY}/usr/bin/"
  cp /usr/bin/builder "${CONTAINER_OVERLAY}/usr/bin/"
  #this is the build script for the container itself
  cp "${build_script}" "${CONTAINER_OVERLAY}/build_script"
  chmod +x "${CONTAINER_OVERLAY}/build_script"
  #start up the container, waiting for the network, and then run the container build script
  lxc-start --name ${CONTAINER_NAME} -d
  starphleet-lxc-wait ${CONTAINER_NAME} RUNNING
  lxc-attach --name ${CONTAINER_NAME} -- bash starphleet-wait-network
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'echo -e "\n127.0.0.1    $(< /etc/hostname)" >> /etc/hosts'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'chmod 777 /var/log/'
  lxc-attach --name ${CONTAINER_NAME} -- bash -c 'echo -e "\n${STARPHLEET_APP_USER} ALL=NOPASSWD:ALL" >> /etc/sudoers'
  lxc-attach --name ${CONTAINER_NAME} -- sudo -H -u ${STARPHLEET_APP_USER} bash -c "source /usr/bin/tools; /build_script"
  if [ "${run}" == "true" ]; then
    info leaving ${CONTAINER_NAME} running
  else
    lxc-stop --name ${CONTAINER_NAME}
    starphleet-lxc-wait ${CONTAINER_NAME} STOPPED
  fi
  info made container ${CONTAINER_NAME}
fi
) 200>/var/lock/${CONTAINER_NAME}
