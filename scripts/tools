# vim: set ft=sh : #main include file for starphleet scripts

ulimit -n ${MAX_OPEN_FILES} > /dev/null

#Library of colorized logging functions, just source this
function error() {
  echo -e  '\E[31m'"\033[1m$*\033[0m"
}

function announce() {
  echo -e  '\E[34m'"\033[1m$*\033[0m"
}

function fatal() {
  echo -e  '\E[31m'"\033[1m$*\033[0m"
  exit 1
}

function trace() {
  >&2 echo -e  '\E[35m'"\033[1m$*\033[0m"
}

function info() {
  echo -e  '\E[32m'"\033[1m$*\033[0m"
}

function warn() {
  echo -e  '\E[33m'"\033[1m$*\033[0m"
}

function log() {
  echo -e "$*"
}

function code() {
  echo -e "CODE$*"
  exit $*
}

silent_pushd(){ pushd $1 > /dev/null 2>&1; }

silent_popd(){ popd $1 > /dev/null 2>&1 ; }

#get the current sha for a given git repository
function get_CURRENT_SHA() {
  export CURRENT_SHA=$(git --git-dir "$1/.git" --work-tree "$1" rev-parse --short HEAD)
}

function get_VERSION_DIFF() {
  export VERSION_DIFF=$(git --git-dir ${1}/.git --work-tree ${1} diff ${2} ${3} ${4})
}

function get_SHASUM() {
  export SHASUM=$(sha1sum "${1}" | awk '{ print substr($1,1,7); }')
}

function get_HASH() {
  export HASH=$(echo $1 | sha1sum | awk '{ print $1; }')
}

function autodeploy() {
  export AUTODEPLOY="${1}"
}

function run_ship_scripts() {
  if [ -d "${SHIP_SCRIPTS}" ]; then
    for file in $(find "${SHIP_SCRIPTS}") ; do
      if [ -x $file ] && [ -f $file ]; then
        #no crashing allowed for these
        $file || true
      fi
    done
  fi
}

function make_admiral() {
  useradd ${ADMIRAL} -m -d ${ADMIRAL_HOME}
  adduser ${ADMIRAL} sudo
  adduser ${ADMIRAL} adm
  adduser ${ADMIRAL} root
  test -d ${ADMIRAL_HOME}/.ssh || mkdir -p ${ADMIRAL_HOME}/.ssh
  mkdir -p ${STARPHLEET_ROOT}
  chown -R ${ADMIRAL}:${ADMIRAL} ${STARPHLEET_ROOT}
  chown -R ${ADMIRAL}:${ADMIRAL} ${ADMIRAL_HOME}
  info admiral created
}

function mail_log()
{
  if which mail > /dev/null; then
    ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"
    latest_AUTHOR "${ORDER_LOCAL}"
    cat /var/log/upstart/${UPSTART_JOB}-${name}.log \
    | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
    | mail -s "Starphleet Build Failure: ${name}" "${AUTHOR}"
  fi
}

function latest_AUTHOR()
{
  export AUTHOR=$(git --git-dir "${1}/.git" --work-tree "${1}" log -1 --format='%ae')
}

function run_orders()
{
  autodeploy () {
    info autodeploy from "${1}"
    [ -n "${AUTODEPLOY}" ] && echo "${1}" > "${AUTODEPLOY}";
    SERVICE_GIT_URL="${1}"
  }

  stop_before_autodeploy () {
    STOP_BEFORE_AUTODEPLOY=1
  }

  beta () {
    BETAS[$1]=$2
  }

  source "${1}" || true
}

#Load up BRIDGE_IP with the address of the bridge loopback. This is the
#way to easily let containers speak to the ship
function bridge_ip() {
  BRIDGE_IP=$(ifconfig | grep -A 1 'lxcbr0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)
}

#set the environment up for the app_root and orders
function container_environment() {
  cd ${1}
  run_orders ${2}
  for file in ${1}/.profile.d/*; do source ${file}; done
  export PATH=${PATH}:/usr/local/bin
}

function ec2_mounts() {
  if mount | grep '/var/lib/lxc'; then
    :
  else
    #may have another device on ec2
    [ -b /dev/xvdb ] && (mount | grep /mnt) &&  mount --bind /mnt /var/lib/lxc || true
  fi
}

function dev_mode() {
  if [ -d /hosthome ]; then
    true
  else
    false
  fi
}

function run_as_root_or_die(){
  if [ $(whoami) != "root" ]; then
    echo "You'll need to be root to do this. Try again as root"
    exit 1
  fi
}

function die_on_error(){
  trap "error 'script execution halted due to error' >&2" ERR
  set -e
}

# environment set up each time we ask for tools
[ -f "/etc/starphleet" ] && source "/etc/starphleet"
[ -f "${HEADQUARTERS_SOURCE}" ] && source "${HEADQUARTERS_SOURCE}"
[ -f "${HEADQUARTERS_ENV}" ] && source "${HEADQUARTERS_ENV}"
:
