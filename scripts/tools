# vim: set ft=sh : #main include file for starphleet scripts
export version=0.0.1
#a default port for the forgetful order:wa
export PORT=3000
export LXC_ROOT="/var/lib/lxc"
export STARPHLEET_SHARED_DATA="${LXC_ROOT}/data"
export STARPHLEET_PULSE="5"
export STARPHLEET_DRAINSTOP_WAIT="30"
export STARPHLEET_ROOT="/var/starphleet"
export STARPHLEET_TMP="${STARPHLEET_ROOT}/tmp"
export STARPHLEET_CACHE="${STARPHLEET_ROOT}/cache"
export STARPHLEET_CPU_STATS="${STARPHLEET_ROOT}/.cpustats"
export STARPHLEET_STATUS="${STARPHLEET_ROOT}/.status"
export HEADQUARTERS_SOURCE="${STARPHLEET_ROOT}/.headquarters"
export HEADQUARTERS_LOCAL="${STARPHLEET_ROOT}/headquarters"
export HEADQUARTERS_ENV="${STARPHLEET_ROOT}/headquarters/.starphleet"
export SHIPS="${HEADQUARTERS_LOCAL}/ships"
export SHIP_SCRIPTS="${HEADQUARTERS_LOCAL}/shipscripts"
export CURRENT_ORDERS="${STARPHLEET_ROOT}/current_orders"
export PRIVATE_KEYS="${STARPHLEET_ROOT}/private_keys"
export PUBLIC_KEYS="${STARPHLEET_ROOT}/public_keys"
export NGINX_CONF="${STARPHLEET_ROOT}/nginx"
export BUILDPACKS="${STARPHLEET_ROOT}/buildpacks"
export ADMIRAL="admiral"
export ADMIRAL_HOME="/home/admiral"
export MAX_OPEN_FILES="4096"
if [ "${TERM}" == "unknown" ]; then
  export TERM="xterm-256color"
fi
export TAILOR_REMOTE="git+https://github.com/wballard/tailor.git"
export DASHBOARD_REMOTE="git+https://github.com/wballard/starphleet.dashboard.git"
export NPM_FLAGS="--unsafe-perm"
export SHIP=ship-$(ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub | awk '{ print $2; }' | sed -e 's/://g')
export STARPHLEET_APP_USER="ubuntu"
export CREW_MEMBERS="1"
export CREW_MEMBER_MAX="$(($(grep "processor" "/proc/cpuinfo" | wc -l) * 2))"
export STARPHLEET_ID_FILE="${STARPHLEET_ROOT}/.starphleet_id"

ulimit -n ${MAX_OPEN_FILES}

#Library of colorized logging functions, just source this
function error() {
  echo -e  '\E[31m'"\033[1m$*\033[0m"
}

function announce() {
  echo -e  '\E[34m'"\033[1m$*\033[0m"
}

function fatal() {
  echo -e  '\E[31m'"\033[1m$*\033[0m"
  exit 1
}

function trace() {
  echo -e  '\E[35m'"\033[1m$*\033[0m"
}

function info() {
  echo -e  '\E[32m'"\033[1m$*\033[0m"
}

function warn() {
  echo -e  '\E[33m'"\033[1m$*\033[0m"
}

function log() {
  echo -e "$*"
}

function code() {
  echo -e "CODE$*"
  exit $*
}

#get the current sha for a given git repository
function get_CURRENT_SHA() {
  export CURRENT_SHA="$(git --git-dir "$1/.git" --work-tree "$1" rev-parse HEAD)"
}

function get_SHASUM() {
  export SHASUM="$(sha1sum "${1}" | awk '{ print substr($1,1,7); }')"
}

function get_HASH() {
  export HASH="$(echo $1 | sha1sum | awk '{ print $1; }')"
}

#TODO: later move this var out to tools
function get_STARPHLEET_ID() {
  export STARPHLEET_ID="$(cat "${STARPHLEET_ID_FILE}")"
}

function get_CONTAINER_GROUP() {
  export CONTAINER_GROUP="$(echo $1 | sha1sum | awk '{ print $1; }')_$(cat "${STARPHLEET_ID_FILE}")"
}

function get_CONTAINER_NAME() {
  export CONTAINER_NAME="$(echo $1 | sha1sum | awk '{ print $1; }')_$(cat "${STARPHLEET_ID_FILE}")_CM${2:-1}"
}

function autodeploy() {
  export AUTODEPLOY="${1}"
}

function get_RANDOM_MAC_ADDRESS() {
  range=255
  for i in {1..6}
  do
    number=$RANDOM
    let "number %= $range"
    segment[$i]=$(echo "obase=16;$number" | bc)
  done
  export RANDOM_MAC_ADDRESS="${segment[1]}:${segment[2]}:${segment[3]}:${segment[4]}:${segment[5]}:${segment[6]}"
}

function run_ship_scripts() {
  if [ -d "${SHIP_SCRIPTS}" ]; then
    for file in $(find "${SHIP_SCRIPTS}") ; do
      if [ -x $file ] && [ -f $file ]; then
        #no crashing allowed for these
        $file || true
      fi
    done
  fi
}

function make_admiral() {
  useradd ${ADMIRAL} -m -d ${ADMIRAL_HOME}
  adduser ${ADMIRAL} sudo
  test -d ${ADMIRAL_HOME}/.ssh || mkdir -p ${ADMIRAL_HOME}/.ssh
  mkdir -p ${STARPHLEET_ROOT}
  chown -R ${ADMIRAL}:${ADMIRAL} ${STARPHLEET_ROOT}
  chown -R ${ADMIRAL}:${ADMIRAL} ${ADMIRAL_HOME}
  info admiral created
}

function apply_order_exports()
{
  # export the three key variables from the orders file (PORT, PUBLISH_PORT, CREW_MEMBERS)
  $(awk '/^[ \t]*export[ \t]+(PORT|PUBLISH_PORT|CREW_MEMBERS)[ \t]*=/ {print $0}' "${1}")
  
  if [ "${CREW_MEMBERS}" -gt "${CREW_MEMBER_MAX}" ]; then 
    echo "You have too many crew members - cap crew members to ${CREW_MEMBER_MAX}"
    export CREW_MEMBERS="${CREW_MEMBER_MAX}" 
  fi
}

# environment, enforced by our buildpack script, so the preference order is:
# * repository specific variables, basically our dev settings
# * headquarters/.../orders variables, service level overrides
# * headquarters/.starphleet variables, global overrides
[ -f "${HEADQUARTERS_SOURCE}" ] && source "${HEADQUARTERS_SOURCE}"
[ -f "/${CHECKOUT_PATH}/.env" ] && source "/${CHECKOUT_PATH}/.env"
[ -f "${HOME}/app/.env" ] && source "${HOME}/app/.env"
[ -f "/.orders" ] && source "/.orders"
[ -f "${HEADQUARTERS_ENV}" ] && source "${HEADQUARTERS_ENV}"
[ -f "/.starphleet" ] && source "/.starphleet"
:
